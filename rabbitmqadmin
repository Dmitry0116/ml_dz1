#!/usr/bin/env python3

from __future__ import print_function
from optparse import OptionParser, TitledHelpFormatter
import base64
import copy
import json
import os
import socket
import ssl
import traceback
import sys

# Handle SIGPIPE to avoid crashes on broken pipes
try:
    from signal import signal, SIGPIPE, SIG_DFL
    signal(SIGPIPE, SIG_DFL)
except ImportError:
    pass

# Error printing function
def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)

# Check Python version requirements
if sys.version_info[0] < 2 or (sys.version_info[0] == 2 and sys.version_info[1] < 6):
    eprint("Sorry, rabbitmqadmin requires at least Python 2.6 (2.7.9 when HTTPS is enabled).")
    sys.exit(1)

# Import necessary modules based on Python version
if sys.version_info[0] == 2:
    from ConfigParser import ConfigParser, NoSectionError
    import httplib
    import urlparse
    from urllib import quote_plus, quote

    def b64(s):
        return base64.b64encode(s)
else:
    from configparser import ConfigParser, NoSectionError
    import http.client as httplib
    import urllib.parse as urlparse
    from urllib.parse import quote_plus, quote

    def b64(s):
        return base64.b64encode(s.encode('utf-8')).decode('utf-8')

# Custom exception classes for connection errors
if sys.version_info[0] == 2:
    class ConnectionError(OSError):
        pass

    class ConnectionRefusedError(ConnectionError):
        pass

VERSION = '%%VSN%%'

# Define API endpoints and structure
LISTABLE = {
    'connections': {'vhost': False, 'cols': ['name', 'user', 'channels']},
    'channels': {'vhost': False, 'cols': ['name', 'user']},
    'consumers': {'vhost': True},
    'exchanges': {'vhost': True, 'cols': ['name', 'type']},
    'queues': {'vhost': True, 'cols': ['name', 'messages']},
    'bindings': {'vhost': True, 'cols': ['source', 'destination', 'routing_key']},
    'users': {'vhost': False},
    'vhosts': {'vhost': False, 'cols': ['name', 'messages']},
    'permissions': {'vhost': False},
    'nodes': {'vhost': False, 'cols': ['name', 'type', 'mem_used']},
    'parameters': {'vhost': False, 'json': ['value']},
    'policies': {'vhost': False, 'json': ['definition']},
    'operator_policies': {'vhost': False, 'json': ['definition']},
    'vhost_limits': {'vhost': False, 'json': ['value']}
}

SHOWABLE = {
    'overview': {'vhost': False, 'cols': ['rabbitmq_version', 'cluster_name', 'queue_totals.messages', 'object_totals.queues']}
}

# Define URI templates for API requests
URIS = {
    'exchange': '/exchanges/{vhost}/{name}',
    'queue': '/queues/{vhost}/{name}',
    'binding': '/bindings/{vhost}/e/{source}/{destination_char}/{destination}',
    'binding_del': '/bindings/{vhost}/e/{source}/{destination_char}/{destination}/{properties_key}',
    'vhost': '/vhosts/{name}',
    'user': '/users/{name}',
    'permission': '/permissions/{vhost}/{user}',
    'parameter': '/parameters/{component}/{vhost}/{name}',
    'policy': '/policies/{vhost}/{name}',
    'operator_policy': '/operator-policies/{vhost}/{name}',
    'vhost_limit': '/vhost-limits/{vhost}/{name}'
}

# Function to fix queue uploads
def queue_upload_fixup(upload):
    if 'queue_type' in upload:
        queue_type = upload.get('queue_type')
        arguments = upload.get('arguments', {})
        arguments['x-queue-type'] = queue_type
        upload['arguments'] = arguments

# Define operations for declaring, deleting, and managing resources
DECLARABLE = {
    'exchange': {'mandatory': ['name', 'type'], 'json': ['arguments'], 'optional': {'auto_delete': 'false', 'durable': 'true', 'internal': 'false', 'arguments': {}}},
    'queue': {'mandatory': ['name'], 'json': ['arguments'], 'optional': {'auto_delete': 'false', 'durable': 'true', 'arguments': {}, 'node': None, 'queue_type': None}, 'fixup_upload': queue_upload_fixup},
    'binding': {'mandatory': ['source', 'destination'], 'json': ['arguments'], 'optional': {'destination_type': 'queue', 'routing_key': '', 'arguments': {}}},
    'vhost': {'mandatory': ['name'], 'optional': {'tracing': None}},
    'user': {'mandatory': ['name', ['password', 'password_hash'], 'tags'], 'optional': {'hashing_algorithm': None}},
    'permission': {'mandatory': ['vhost', 'user', 'configure', 'write', 'read'], 'optional': {}},
    'parameter': {'mandatory': ['component', 'name', 'value'], 'json': ['value'], 'optional': {}},
    'policy': {'mandatory': ['name', 'pattern', 'definition'], 'json': ['definition', 'priority'], 'optional': {'priority': 0, 'apply-to': None}},
    'operator_policy': {'mandatory': ['name', 'pattern', 'definition'], 'json': ['definition', 'priority'], 'optional': {'priority': 0, 'apply-to': None}},
    'vhost_limit': {'mandatory': ['vhost', 'name', 'value'], 'json': ['value'], 'optional': {}}
}

DELETABLE = {
    'exchange': {'mandatory': ['name']},
    'queue': {'mandatory': ['name']},
    'binding': {'mandatory': ['source', 'destination_type', 'destination'], 'optional': {'properties_key': '~'}},
    'vhost': {'mandatory': ['name']},
    'user': {'mandatory': ['name']},
    'permission': {'mandatory': ['vhost', 'user']},
    'parameter': {'mandatory': ['component', 'name']},
    'policy': {'mandatory': ['name']},
    'operator_policy': {'mandatory': ['name']},
    'vhost_limit': {'mandatory': ['vhost', 'name']}
}

CLOSABLE = {
    'connection': {'mandatory': ['name'], 'optional': {}, 'uri': '/connections/{name}'}
}

PURGABLE = {
    'queue': {'mandatory': ['name'], 'optional': {}, 'uri': '/queues/{vhost}/{name}/contents'}
}

EXTRA_VERBS = {
    'publish': {'mandatory': ['routing_key'], 'optional': {'payload': None, 'properties': {}, 'exchange': 'amq.default', 'payload_encoding': 'string'}, 'json': ['properties'], 'uri': '/exchanges/{vhost}/{exchange}/publish'},
    'get': {'mandatory': ['queue'], 'optional': {'count': '1', 'ackmode': 'ack_requeue_true', 'payload_file': None, 'encoding': 'auto'}, 'uri': '/queues/{vhost}/{queue}/get'}
}

# Assign URIs to DECLARABLE and DELETABLE objects
for k in DECLARABLE:
    DECLARABLE[k]['uri'] = URIS[k]

for k in DELETABLE:
    DELETABLE[k]['uri'] = URIS[k]
    DELETABLE[k]['optional'] = DELETABLE[k].get('optional', {})
DELETABLE['binding']['uri'] = URIS['binding_del']

# Short usage string
def short_usage():
    return "rabbitmqadmin [options] subcommand"

# Title formatting
def title(name):
    return "\n%s\n%s\n\n" % (name, '=' * len(name))

# Subcommands usage information
def subcommands_usage():
    usage = """Usage
=====
  """ + short_usage() + """
  
  where subcommand is one of:
""" + title("Display")

    for l in LISTABLE:
        usage += "  list {0} [<column>...]\n".format(l)
    for s in SHOWABLE:
        usage += "  show {0} [<column>...]\n".format(s)
    usage += title("Object Manipulation")
    usage += fmt_usage_stanza(DECLARABLE, 'declare')
    usage += fmt_usage_stanza(DELETABLE, 'delete')
    usage += fmt_usage_stanza(CLOSABLE, 'close')
    usage += fmt_usage_stanza(PURGABLE, 'purge')
    usage += title("Broker Definitions")
    usage += """  export <file>
  import <file>
"""
    usage += title("Publishing and Consuming")
    usage += fmt_usage_stanza(EXTRA_VERBS, '')
    usage += """
  * If payload is not specified on publish, standard input is used

  * If payload_file is not specified on get, the payload will be shown on
    standard output along with the message metadata

  * If payload_file is specified on get, count must not be set
"""
    return usage

# Configuration usage information
def config_usage():
    usage = "Usage\n=====\n" + short_usage()
    usage += "\n" + title("Configuration File")
    usage += """  It is possible to specify a configuration file from the command line.
  Hosts can be configured easily in a configuration file and called
  from the command line.
"""
    usage += title("Example")
    usage += """  # rabbitmqadmin.conf.example START

  [host_normal]
  hostname = localhost
  port = 15672
  username = guest
  password = guest
  declare_vhost = / # Used as default for declare / delete only
  vhost = /         # Used as default for declare / delete / list

  [host_ssl]
  hostname = otherhost
  port = 15672
  username = guest
  password = guest
  ssl = True
  ssl_key_file = /path/to/key.pem
  ssl_cert_file = /path/to/cert.pem

  # rabbitmqadmin.conf.example END
"""
    usage += title("Use")
    usage += """  rabbitmqadmin -c rabbitmqadmin.conf.example -N host_normal ..."""
    return usage

# More help information
def more_help():
    return """
More Help
=========

For more help use the help subcommand:

  rabbitmqadmin help subcommands  # For a list of available subcommands
  rabbitmqadmin help config       # For help with the configuration file
"""

# Formatting functions for usage
def fmt_required_flag(val):
    if isinstance(val, list):
        return "=... OR ".join(val)
    return val

def fmt_optional_flag(val):
    return val

def fmt_usage_stanza(root, verb):
    def fmt_args(args):
        res = " ".join(["{0}=...".format(fmt_required_flag(a)) for a in args['mandatory']])
        opts = " ".join("{0}=...".format(fmt_optional_flag(o)) for o in args['optional'].keys())
        if opts:
            res += " [{0}]".format(opts)
        return res

    text = ""
    if verb:
        verb = " " + verb
    for k in root.keys():
        text += " {0} {1} {2}\n".format(verb, k, fmt_args(root[k]))
    return text

# Default options for the application
default_options = {
    "hostname": "localhost",
    "port": "15672",
    "node": "default",
    "path_prefix": "",
    "declare_vhost": "/",
    "username": "guest",
    "password": "guest",
    "ssl": False,
    "request_timeout": 120,
    "verbose": True,
    "format": "table",
    "depth": 1,
    "bash_completion": False
}

# Custom help formatter
class MyFormatter(TitledHelpFormatter):
    def format_epilog(self, epilog):
        return epilog

# Create option parser
parser = OptionParser(usage=short_usage(), formatter=MyFormatter(), epilog=more_help())

# Function to create the command line argument parser
def make_parser():
    def add(*args, **kwargs):
        key = kwargs['dest']
        if key in default_options:
            default = " [default: %s]" % default_options[key]
            kwargs['help'] = kwargs['help'] + default
        parser.add_option(*args, **kwargs)

    add("-c", "--config", dest="config", help="configuration file [default: ~/.rabbitmqadmin.conf]", metavar="CONFIG")
    add("-N", "--node", dest="node", help="node described in the configuration file [default: 'default' only if configuration file is specified]", metavar="NODE")
    add("-H", "--host", dest="hostname", help="connect to host HOST", metavar="HOST")
    add("-P", "--port", dest="port", help="connect to port PORT", metavar="PORT")
    add("--path-prefix", dest="path_prefix", help="use specific URI path prefix for the RabbitMQ HTTP API. /api and operation path will be appended to it. (default: blank string)")
    add("-V", "--vhost", dest="vhost", help="connect to vhost VHOST [default: all vhosts for list, '/' for declare]", metavar="VHOST")
    add("-u", "--username", dest="username", help="connect using username USERNAME", metavar="USERNAME")
    add("-p", "--password", dest="password", help="connect using password PASSWORD", metavar="PASSWORD")
    add("-U", "--base-uri", dest="base_uri", help="connect using a base HTTP API URI. /api and operation path will be appended to it. Path will be ignored. --vhost has to be provided separately.", metavar="URI")
    add("-q", "--quiet", action="store_false", dest="verbose", help="suppress status messages")
    add("-s", "--ssl", action="store_true", dest="ssl", help="connect with ssl")
    add("--ssl-key-file", dest="ssl_key_file", help="PEM format key file for SSL")
    add("--ssl-cert-file", dest="ssl_cert_file", help="PEM format certificate file for SSL")
    add("--ssl-ca-cert-file", dest="ssl_ca_cert_file", help="PEM format CA certificate file for SSL")
    add("--ssl-disable-hostname-verification", dest="ssl_disable_hostname_verification", help="Disables peer hostname verification", default=False, action="store_true")
    add("-k", "--ssl-insecure", dest="ssl_insecure", help="Disables all SSL validations like curl's '-k' argument", default=False, action="store_true")
    add("-t", "--request-timeout", dest="request_timeout", help="HTTP request timeout in seconds", type="int")
    add("-f", "--format", dest="format", help="format for listing commands - one of [" + ", ".join(FORMATS.keys()) + "]")
    add("-S", "--sort", dest="sort", help="sort key for listing queries")
    add("-R", "--sort-reverse", action="store_true", dest="sort_reverse", help="reverse the sort order")
    add("-d", "--depth", dest="depth", help="maximum depth to recurse for listing tables")
    add("--bash-completion", action="store_true", dest="bash_completion", help="Print bash completion script")
    add("--version", action="store_true", dest="version", help="Display version and exit")

# Function to get the default configuration file
def default_config():
    home = os.getenv('USERPROFILE') or os.getenv('HOME')
    if home is not None:
        config_file = os.path.join(home, ".rabbitmqadmin.conf")
        if os.path.isfile(config_file):
            return config_file
    return None

# Function to create the final configuration
def make_configuration():
    make_parser()
    (cli_options, args) = parser.parse_args()

    if cli_options.version:
        print_version()

    setattr(cli_options, "declare_vhost", None)
    final_options = copy.copy(cli_options)

    # Resolve config file path
    if cli_options.config is None:
        config_file = default_config()
        if config_file is not None:
            setattr(final_options, "config", config_file)
    else:
        if not os.path.isfile(cli_options.config):
            assert_usage(False, "Could not read config file '%s'" % cli_options.config)

    final_options = merge_default_options(cli_options, final_options)
    final_options = merge_config_file_options(cli_options, final_options)
    final_options = expand_base_uri_options(cli_options, final_options)

    return (final_options, args)

def merge_default_options(cli_options, final_options):
    for (key, default_val) in default_options.items():
        if getattr(cli_options, key) is None:
            setattr(final_options, key, default_val)
    return final_options

def merge_config_file_options(cli_options, final_options):
    # Parse config file and load it, making sure that CLI flags take precedence
    if final_options.config is not None:
        config_parser = ConfigParser()
        try:
            config_parser.read(final_options.config)
            section_settings = dict(config_parser.items(final_options.node))
        except NoSectionError as error:
            # Report if an explicitly provided section (node) does not exist in the file
            if final_options.node == "default":
                pass
            else:
                msg = "Could not read section '%s' in config file '%s':\n   %s" % (final_options.node, final_options.config, error)
                assert_usage(False, msg)
        else:
            for key, section_val in section_settings.items():
                # special case --ssl
                if key == 'ssl':
                    setattr(final_options, key, section_val == "True")
                else:
                    # if CLI options do not contain this key, set it from the config file
                    if getattr(cli_options, key) is None:
                        setattr(final_options, key, section_val)
    return final_options

def expand_base_uri_options(cli_options, final_options):
    # if --base-uri is passed, set connection parameters from it
    if final_options.base_uri is not None:
        u = urlparse.urlparse(final_options.base_uri)
        for key in ["hostname", "port", "username", "password"]:
            if getattr(u, key) is not None:
                setattr(final_options, key, getattr(u, key))

        if u.path and (u.path != "") and (u.path != "/"):
            eprint("WARNING: path in --base-uri is ignored. Please specify --vhost and/or --path-prefix separately.\n")
    return final_options

def assert_usage(expr, error):
    if not expr:
        eprint("\nERROR: {0}\n".format(error))
        eprint("{0} --help for help\n".format(os.path.basename(sys.argv[0])))
        sys.exit(1)

def print_version():
    print("rabbitmqadmin {0}".format(VERSION))
    sys.exit(0)

def column_sort_key(col):
    if col in PROMOTE_COLUMNS:
        return (1, PROMOTE_COLUMNS.index(col))
    else:
        return (2, col)

def main():
    (options, args) = make_configuration()
    if options.bash_completion:
        print_bash_completion()
        sys.exit(0)
    assert_usage(len(args) > 0, 'Action not specified')
    mgmt = Management(options, args[1:])
    mode = "invoke_" + args[0]
    assert_usage(hasattr(mgmt, mode), 'Action {0} not understood'.format(args[0]))
    method = getattr(mgmt, "invoke_%s" % args[0])
    method()

def die(s):
    eprint("*** {0}\n".format(s))
    sys.exit(1)

def maybe_utf8(s):
    if isinstance(s, int):
        return str(s)
    if isinstance(s, float):
        return str(s)
    if sys.version_info[0] == 3:
        return s
    else:
        return s.encode('utf-8')

# Management class for handling RabbitMQ management commands
class Management:
    def __init__(self, options, args):
        self.options = options
        self.args = args

    def get(self, path):
        return self.http("GET", "%s/api%s" % (self.options.path_prefix, path), "")

    def put(self, path, body):
        return self.http("PUT", "%s/api%s" % (self.options.path_prefix, path), body)

    def post(self, path, body):
        return self.http("POST", "%s/api%s" % (self.options.path_prefix, path), body)

    def delete(self, path):
        return self.http("DELETE", "%s/api%s" % (self.options.path_prefix, path), "")

    def __initialize_connection(self, hostname, port):
        if self.options.ssl:
            return self.__initialize_https_connection(hostname, port)
        else:
            return httplib.HTTPConnection(hostname, port, timeout=self.options.request_timeout)

    def __initialize_https_connection(self, hostname, port):
        if hasattr(ssl, 'create_default_context'):
            return httplib.HTTPSConnection(hostname, port, context=self.__initialize_tls_context())
        else:
            eprint("WARNING: rabbitmqadmin requires Python 2.7.9+ when HTTPS is used.")
            return httplib.HTTPSConnection(hostname, port, cert_file=self.options.ssl_cert_file, key_file=self.options.ssl_key_file)

    def __initialize_tls_context(self):
        ssl_ctx = ssl.create_default_context(ssl.Purpose.SERVER_AUTH)
        ssl_ctx.options &= ~ssl.OP_NO_SSLv3
        ssl_ctx.check_hostname = not self.options.ssl_disable_hostname_verification
        ssl_ctx.verify_mode = ssl.CERT_NONE if self.options.ssl_insecure else ssl.CERT_REQUIRED

        if self.options.ssl_key_file:
            ssl_ctx.load_cert_chain(self.options.ssl_cert_file, self.options.ssl_key_file)
        if self.options.ssl_ca_cert_file:
            ssl_ctx.load_verify_locations(self.options.ssl_ca_cert_file)
        return ssl_ctx

    def http(self, method, path, body):
        conn = self.__initialize_connection(self.options.hostname, self.options.port)
        auth = (self.options.username + ":" + self.options.password)
        headers = {"Authorization": "Basic " + b64(auth)}
        if body:
            headers["Content-Type"] = "application/json"

        try:
            conn.request(method
